#version 450
#extension GL_ARB_separate_shader_objects : enable

#define SCR_WIDTH 1920
#define SCR_HEIGHT 1080
#define EPS 0.001
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

struct Particle {
	vec2 anchor;
	vec2 pos;
	vec2 vel;
	vec3 color;
};

layout(std140, binding = 0) buffer buf
{
   Particle parts[];
};

layout(std140, set = 1, binding = 1) uniform UniformBufferObject {
    vec2 mouse_pos;
    float dt;
    int mouse_hold;
    int PARTICLE_COUNT;
    float power_delta;
} ubo;

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id > ubo.PARTICLE_COUNT) {
		return;
	}

	Particle pt = parts[id];

	float W_H = float(SCR_WIDTH) / float(SCR_HEIGHT);

	vec2 delta_anchor = (pt.anchor - pt.pos);
	vec2 delta_mouse = vec2(ubo.mouse_pos.x, ubo.mouse_pos.y) - vec2(pt.pos.x, pt.pos.y);

	if ((ubo.mouse_hold & 2) != 0) {
		delta_mouse.x *= W_H;
	}
	// delta_mouse.x *= W_H;

	float l_da = length(delta_anchor);
	float l_dm = length(delta_mouse);

	vec2 dvel_mouse;
	vec2 dvel_anchor;

	if (l_da > 0) {
		pt.vel += delta_anchor / l_da * (5 * pow(l_da, 1.8));
	}

	if (l_dm > 0 && (ubo.mouse_hold & 1) != 0) {
		dvel_mouse = delta_mouse / l_dm / pow(0.9 + ubo.power_delta / 50 + l_dm, 20);
		pt.vel -= vec2(dvel_mouse.x, dvel_mouse.y);
	}

	if (l_dm > 0 && (ubo.mouse_hold & 2) != 0) {
		dvel_mouse = delta_mouse / l_dm / pow(0.9 + ubo.power_delta / 50 + l_dm, 20);
		pt.vel -= vec2(dvel_mouse.x, dvel_mouse.y);
	}
	
	pt.pos += pt.vel * ubo.dt / 2;
	pt.vel *= 0.994;

	// if (l_dm > 0 && (ubo.mouse_hold & 2) != 0) {
	// 	pt.vel *= pow(0.5 + length(l_da), 2);
	// }

	parts[id] = pt;
}