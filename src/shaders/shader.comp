#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH  2000
#define HEIGHT 1000
#define PRT_CNT WIDTH * HEIGHT * 0.15
#define EPS 0.001
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

struct Particle {
	vec2 anchor;
	vec2 pos;
	vec2 vel;
	vec3 color;
};

layout(std140, binding = 0) buffer buf
{
   Particle parts[];
};

layout(std140, set = 1, binding = 1) uniform UniformBufferObject {
    vec2 mouse_pos;
    float dt;
    int mouse_hold;
    int PARTICLE_COUNT;
} ubo;

void main() {
	uint id = gl_GlobalInvocationID.x;
	if (id > ubo.PARTICLE_COUNT) {
		return;
	}

	Particle pt = parts[id];

	vec2 delta_anchor = pt.anchor - pt.pos;
	vec2 delta_mouse = ubo.mouse_pos - pt.pos;

	float l_da = length(delta_anchor);
	float l_dm = length(delta_mouse);

	if (l_da > 0) {
		pt.vel += delta_anchor / l_da * (5 * pow(l_da, 1.8));
	}

	if (l_dm > 0 && (ubo.mouse_hold & 1) != 0) {	
		delta_mouse = delta_mouse / l_dm / pow(1 + l_dm, 2) / 30;
		pt.vel -= delta_mouse;
	}

	if (l_dm > 0 && (ubo.mouse_hold & 2) != 0) {	
		delta_mouse = delta_mouse / l_dm / pow(1 + l_dm, 2) / 15;
		pt.vel += delta_mouse;
	}

	
	pt.pos += pt.vel * ubo.dt / 2;
	pt.vel *= 0.994;
	

	parts[id] = pt;
}